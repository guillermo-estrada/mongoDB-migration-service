plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.migration.hexa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
//	Spring Boot Starter Web for REST API creation
	implementation 'org.springframework.boot:spring-boot-starter-web'

//	Faker Library
	implementation ('com.github.javafaker:javafaker:1.0.2'){
		exclude group: 'org.yaml', module: 'snakeyaml'
	}

//	JDBC and MySQL
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'mysql:mysql-connector-java'

//	ActiveMQ dependency
	implementation 'org.springframework.boot:spring-boot-starter-activemq'

//	MongoDB dependency
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

//	Jackson core for JSON Binding
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.core:jackson-databind'

//	Lombok dependency for annotation processing
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

//	DevTools dependency
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

//	Spring Boot dependency for test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/migration/hexa/migrationdb/MigrationdbApplication.class",
					"com/migration/hexa/migrationdb/consumer/ConsumerComponent.class"
//					"**/config/*"
			])
		}))
	}
}

jacoco {
	toolVersion = "0.8.5"
	reportsDir = file("$buildDir/jacoco")
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 1
			}
		}
	}
}